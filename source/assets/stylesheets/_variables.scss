// $mod_1: 1.067;
// $mod_2: 1.333;

$mod_1: 1.10;
$mod_2: 1.333;

$mod_3: 1.0;
$mod_4: 1.6;

$screen-minW: 36rem;
$screen-maxW: 150rem;

$ff-serif: "Times New Roman", serif;
// $ff-serif: Palatino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, serif;
$ff-sans: Arial, sans-serif;

$color-black: #000000;
$color-white: #FFFFFF;
$color-highlight: #4b32f0;
$color-green: #f64051;
$color-lightGrey: #f4f4f4;

$color-ferocia: #3d3369;


@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }

      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  } @else {
    @error "Detected mixed units. Please use the same units for all parameters.";
  }
}


@mixin breakpoint($point) {
  @if $point == small {
    @media screen and (min-width: 35rem) {
      & {
        @content;
      }
    }
  }
  @else if $point == medium {
    @media screen and (min-width: 100rem) {
      & {
        @content;
      }
    }
  }
  @else {
    @media screen and (min-width: $point) {
      & {
        @content;
      }
    }
  }
}


@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@include keyframes(no-anim) {

}

@mixin animation ($stuff ) {
  -webkit-animation: $stuff;
  -moz-animation: $stuff;
  -ms-animation: $stuff;
  animation: $stuff;
}
